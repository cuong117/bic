{"cf7211f9d7d70d56501d8c4c827bf9ce3cac5f0b":{"changes":{"src\/main\/java\/org\/apache\/commons\/lang3\/StringUtils.java":"MODIFY","src\/test\/java\/org\/apache\/commons\/lang3\/StringUtilsEqualsIndexOfTest.java":"MODIFY","pom.xml":"MODIFY"},"diff":{"src\/main\/java\/org\/apache\/commons\/lang3\/StringUtils.java":[{"add":["760","     * <p>Compares two CharSequences, returning {@code true} if they represent","761","     * equal sequences of characters.<\/p>","774","     * @see java.lang.CharSequence#equals(Object)","775","     * @param cs1  the first CharSequence, may be {@code null}","776","     * @param cs2  the second CharSequence, may be {@code null}","777","     * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}","781","        if (cs1 == cs2) {","782","            return true;","783","        }","784","        if (cs1 == null || cs2 == null) {","785","            return false;","786","        }","787","        if (cs1 instanceof String && cs2 instanceof String) {","788","            return cs1.equals(cs2);","789","        }","790","        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));","794","     * <p>Compares two CharSequences, returning {@code true} if they represent","795","     * equal sequences of characters, ignoring case.<\/p>"],"delete":["760","     * <p>Compares two CharSequences, returning {@code true} if they are equal.<\/p>","773","     * @see java.lang.String#equals(Object)","774","     * @param cs1  the first CharSequence, may be null","775","     * @param cs2  the second CharSequence, may be null","776","     * @return {@code true} if the CharSequences are equal, case sensitive, or","777","     *  both {@code null}","781","        return cs1 == null ? cs2 == null : cs1.equals(cs2);","785","     * <p>Compares two CharSequences, returning {@code true} if they are equal ignoring","786","     * the case.<\/p>"]}],"src\/test\/java\/org\/apache\/commons\/lang3\/StringUtilsEqualsIndexOfTest.java":[{"add":["21","import org.hamcrest.core.IsNot;","22","import static org.junit.Assert.assertThat;","442","    \/\/ The purpose of this class is to test StringUtils#equals(CharSequence, CharSequence)","443","    \/\/ with a CharSequence implementation whose equals(Object) override requires that the","444","    \/\/ other object be an instance of CustomCharSequence, even though, as char sequences,","445","    \/\/ `seq` may equal the other object.","446","    private static class CustomCharSequence implements CharSequence {","447","        private CharSequence seq;","448","","449","        public CustomCharSequence(CharSequence seq) {","450","            this.seq = seq;","451","        }","452","","453","        public char charAt(int index) {","454","            return seq.charAt(index);","455","        }","456","","457","        public int length() {","458","            return seq.length();","459","        }","460","","461","        public CharSequence subSequence(int start, int end) {","462","            return new CustomCharSequence(seq.subSequence(start, end));","463","        }","464","","465","        @Override","466","        public boolean equals(Object obj) {","467","            if (obj == null || !(obj instanceof CustomCharSequence)) {","468","                return false;","469","            }","470","            CustomCharSequence other = (CustomCharSequence) obj;","471","            return seq.equals(other.seq);","472","        }","473","","474","        public String toString() {","475","            return seq.toString();","476","        }","477","    }","478","","479","    public void testCustomCharSequence() {","480","        assertThat((CharSequence) new CustomCharSequence(FOO), IsNot.<CharSequence>not(FOO));","481","        assertThat((CharSequence) FOO, IsNot.<CharSequence>not(new CustomCharSequence(FOO)));","482","        assertEquals(new CustomCharSequence(FOO), new CustomCharSequence(FOO));","483","    }","484","","486","        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;","487","        assertTrue(StringUtils.equals(null, null));","488","        assertTrue(StringUtils.equals(fooCs, fooCs));","489","        assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));","490","        assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));","491","        assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));","492","        assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));","493","        assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));","494","        assertFalse(StringUtils.equals(fooCs, barCs));","495","        assertFalse(StringUtils.equals(fooCs, null));","496","        assertFalse(StringUtils.equals(null, fooCs));","497","        assertFalse(StringUtils.equals(fooCs, foobarCs));","498","        assertFalse(StringUtils.equals(foobarCs, fooCs));","499","    }","500","","501","    public void testEqualsOnStrings() {","502","        assertTrue(StringUtils.equals(null, null));","503","        assertTrue(StringUtils.equals(FOO, FOO));","504","        assertTrue(StringUtils.equals(FOO, new String(new char[] { 'f', 'o', 'o' })));","505","        assertFalse(StringUtils.equals(FOO, new String(new char[] { 'f', 'O', 'O' })));","506","        assertFalse(StringUtils.equals(FOO, BAR));","507","        assertFalse(StringUtils.equals(FOO, null));","508","        assertFalse(StringUtils.equals(null, FOO));","509","        assertFalse(StringUtils.equals(FOO, FOOBAR));","510","        assertFalse(StringUtils.equals(FOOBAR, FOO));"],"delete":["441","        assertEquals(true, StringUtils.equals(null, null));","442","        assertEquals(true, StringUtils.equals(FOO, FOO));","443","        assertEquals(true, StringUtils.equals(FOO, new String(new char[] { 'f', 'o', 'o' })));","444","        assertEquals(false, StringUtils.equals(FOO, new String(new char[] { 'f', 'O', 'O' })));","445","        assertEquals(false, StringUtils.equals(FOO, BAR));","446","        assertEquals(false, StringUtils.equals(FOO, null));","447","        assertEquals(false, StringUtils.equals(null, FOO));"]}],"pom.xml":[{"add":["397","      <name>Daniel Trebbien<\/name>","398","    <\/contributor>","399","    <contributor>"],"delete":[]}]}}}